  [1m[36m (5089.4ms)[0m  [1mDROP DATABASE IF EXISTS "wolfadmin_test"[0m
PG::ObjectInUse: ERROR:  database "wolfadmin_test" is being accessed by other users
DETAIL:  There is 1 other session using the database.
: DROP DATABASE IF EXISTS "wolfadmin_test"
  [1m[36m (124.9ms)[0m  [1mCREATE TABLE "schema_migrations" ("version" character varying(255) NOT NULL) [0m
  [1m[35m (10.8ms)[0m  CREATE UNIQUE INDEX  "unique_schema_migrations" ON "schema_migrations"  ("version")
  [1m[36mActiveRecord::SchemaMigration Load (0.9ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to CreateUsers (20150922115605)
  [1m[35m (0.4ms)[0m  BEGIN
  [1m[36m (79.8ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "schema_migrations" ("version") VALUES ($1)  [["version", "20150922115605"]]
  [1m[36m (15.6ms)[0m  [1mCOMMIT[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.4ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36mActiveRecord::SchemaMigration Load (0.8ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.8ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.8ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (57.4ms)[0m  ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "users" DISABLE TRIGGER ALL
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mFixture Delete (0.8ms)[0m  DELETE FROM "users"
  [1m[36mFixture Insert (1.1ms)[0m  [1mINSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:30:46', '2015-09-22 14:30:46', 980190962)[0m
  [1m[35mFixture Insert (0.9ms)[0m  INSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:30:46', '2015-09-22 14:30:46', 298486374)
  [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "users" ENABLE TRIGGER ALL
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
--------------------------------------
UserTest: test_email_should_be_present
--------------------------------------
  [1m[35m (0.3ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-------------------------------------
UserTest: test_name_should_be_present
-------------------------------------
  [1m[35m (0.3ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
------------------------------
UserTest: test_should_be_valid
------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (0.5ms)[0m  ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "users" DISABLE TRIGGER ALL
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mFixture Delete (0.5ms)[0m  DELETE FROM "users"
  [1m[36mFixture Insert (0.6ms)[0m  [1mINSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:32:07', '2015-09-22 14:32:07', 980190962)[0m
  [1m[35mFixture Insert (0.3ms)[0m  INSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:32:07', '2015-09-22 14:32:07', 298486374)
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.4ms)[0m  ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "users" ENABLE TRIGGER ALL
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
--------------------------------------
UserTest: test_email_should_be_present
--------------------------------------
  [1m[35m (0.3ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
-------------------------------------------
UserTest: test_email_should_not_be_too_long
-------------------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-------------------------------------
UserTest: test_name_should_be_present
-------------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
------------------------------------------
UserTest: test_name_should_not_be_too_long
------------------------------------------
  [1m[35m (2.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
------------------------------
UserTest: test_should_be_valid
------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.8ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (0.5ms)[0m  ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "users" DISABLE TRIGGER ALL
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mFixture Delete (0.5ms)[0m  DELETE FROM "users"
  [1m[36mFixture Insert (0.5ms)[0m  [1mINSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:32:59', '2015-09-22 14:32:59', 980190962)[0m
  [1m[35mFixture Insert (0.2ms)[0m  INSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:32:59', '2015-09-22 14:32:59', 298486374)
  [1m[36m (469.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.5ms)[0m  ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "users" ENABLE TRIGGER ALL
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
--------------------------------------
UserTest: test_email_should_be_present
--------------------------------------
  [1m[35m (0.5ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-------------------------------------------
UserTest: test_email_should_not_be_too_long
-------------------------------------------
  [1m[35m (0.4ms)[0m  ROLLBACK
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
-------------------------------------
UserTest: test_name_should_be_present
-------------------------------------
  [1m[35m (0.3ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
------------------------------------------
UserTest: test_name_should_not_be_too_long
------------------------------------------
  [1m[35m (0.3ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
------------------------------
UserTest: test_should_be_valid
------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (0.5ms)[0m  ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "users" DISABLE TRIGGER ALL
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mFixture Delete (0.5ms)[0m  DELETE FROM "users"
  [1m[36mFixture Insert (0.5ms)[0m  [1mINSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:35:42', '2015-09-22 14:35:42', 980190962)[0m
  [1m[35mFixture Insert (0.2ms)[0m  INSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:35:42', '2015-09-22 14:35:42', 298486374)
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "users" ENABLE TRIGGER ALL
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
--------------------------------------
UserTest: test_email_should_be_present
--------------------------------------
  [1m[35m (0.4ms)[0m  ROLLBACK
  [1m[36m (0.4ms)[0m  [1mBEGIN[0m
-------------------------------------------
UserTest: test_email_should_not_be_too_long
-------------------------------------------
  [1m[35m (0.3ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-------------------------------------------------------------
UserTest: test_email_validation_should_accept_valid_addresses
-------------------------------------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
---------------------------------------------------------------
UserTest: test_email_validation_should_reject_invalid_addresses
---------------------------------------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-------------------------------------
UserTest: test_name_should_be_present
-------------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
------------------------------------------
UserTest: test_name_should_not_be_too_long
------------------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
------------------------------
UserTest: test_should_be_valid
------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (0.5ms)[0m  ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "users" DISABLE TRIGGER ALL
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mFixture Delete (0.5ms)[0m  DELETE FROM "users"
  [1m[36mFixture Insert (0.6ms)[0m  [1mINSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:37:29', '2015-09-22 14:37:29', 980190962)[0m
  [1m[35mFixture Insert (0.3ms)[0m  INSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:37:29', '2015-09-22 14:37:29', 298486374)
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "users" ENABLE TRIGGER ALL
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
--------------------------------------
UserTest: test_email_should_be_present
--------------------------------------
  [1m[35m (0.4ms)[0m  ROLLBACK
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
-------------------------------------------
UserTest: test_email_should_not_be_too_long
-------------------------------------------
  [1m[35m (0.6ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-------------------------------------------------------------
UserTest: test_email_validation_should_accept_valid_addresses
-------------------------------------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
---------------------------------------------------------------
UserTest: test_email_validation_should_reject_invalid_addresses
---------------------------------------------------------------
  [1m[35m (0.5ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-------------------------------------
UserTest: test_name_should_be_present
-------------------------------------
  [1m[35m (1.1ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
------------------------------------------
UserTest: test_name_should_not_be_too_long
------------------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
------------------------------
UserTest: test_should_be_valid
------------------------------
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (0.7ms)[0m  ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "users" DISABLE TRIGGER ALL
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mFixture Delete (0.7ms)[0m  DELETE FROM "users"
  [1m[36mFixture Insert (0.6ms)[0m  [1mINSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:39:34', '2015-09-22 14:39:34', 980190962)[0m
  [1m[35mFixture Insert (0.7ms)[0m  INSERT INTO "users" ("name", "email", "password", "avatar", "created_at", "updated_at", "id") VALUES ('MyString', 'MyString', 'MyString', NULL, '2015-09-22 14:39:34', '2015-09-22 14:39:34', 298486374)
  [1m[36m (92.7ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.4ms)[0m  ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "users" ENABLE TRIGGER ALL
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-----------------------------------------------
UserTest: test_email_addresses_should_be_unique
-----------------------------------------------
  [1m[35m (0.5ms)[0m  SAVEPOINT active_record_1
  [1m[36mUser Exists (17.0ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "users" ("created_at", "email", "name", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "id"  [["created_at", "2015-09-22 14:39:36.450514"], ["email", "user@example.com"], ["name", "Example User"], ["updated_at", "2015-09-22 14:39:36.450514"]]
  [1m[36m (0.2ms)[0m  [1mRELEASE SAVEPOINT active_record_1[0m
  [1m[35mUser Exists (0.6ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('USER@EXAMPLE.COM') LIMIT 1
  [1m[36m (0.5ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
--------------------------------------
UserTest: test_email_should_be_present
--------------------------------------
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('     ') LIMIT 1[0m
  [1m[35m (0.3ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-------------------------------------------
UserTest: test_email_should_not_be_too_long
-------------------------------------------
  [1m[35mUser Exists (1.1ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@example.co') LIMIT 1
  [1m[36m (0.4ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.6ms)[0m  BEGIN
-------------------------------------------------------------
UserTest: test_email_validation_should_accept_valid_addresses
-------------------------------------------------------------
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('USER@foo.COM') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('A_US-ER@foo.bar.org') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('first.last@foo.jp') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('alice+bob@baz.cn') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
---------------------------------------------------------------
UserTest: test_email_validation_should_reject_invalid_addresses
---------------------------------------------------------------
  [1m[35mUser Exists (0.5ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example,com') LIMIT 1
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user_at_foo.org') LIMIT 1[0m
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user.name@example.') LIMIT 1
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar_baz.com') LIMIT 1[0m
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar+baz.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
-------------------------------------
UserTest: test_name_should_be_present
-------------------------------------
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
------------------------------------------
UserTest: test_name_should_not_be_too_long
------------------------------------------
  [1m[35mUser Exists (0.5ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
------------------------------
UserTest: test_should_be_valid
------------------------------
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[36m (5046.8ms)[0m  [1mDROP DATABASE IF EXISTS "wolfadmin_test"[0m
PG::ObjectInUse: ERROR:  database "wolfadmin_test" is being accessed by other users
DETAIL:  There is 1 other session using the database.
: DROP DATABASE IF EXISTS "wolfadmin_test"
  [1m[35mActiveRecord::SchemaMigration Load (0.9ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to AddIndexToUsersEmail (20150922144059)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (3.9ms)[0m  [1mCREATE UNIQUE INDEX  "index_users_on_email" ON "users"  ("email")[0m
PG::UniqueViolation: ERROR:  could not create unique index "index_users_on_email"
DETAIL:  Key (email)=(MyString) is duplicated.
: CREATE UNIQUE INDEX  "index_users_on_email" ON "users"  ("email")
  [1m[35m (0.4ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to AddIndexToUsersEmail (20150922144059)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (3.2ms)[0m  [1mCREATE UNIQUE INDEX  "index_users_on_email" ON "users"  ("email")[0m
PG::UniqueViolation: ERROR:  could not create unique index "index_users_on_email"
DETAIL:  Key (email)=(MyString) is duplicated.
: CREATE UNIQUE INDEX  "index_users_on_email" ON "users"  ("email")
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to AddIndexToUsersEmail (20150922144059)
  [1m[35m (0.4ms)[0m  BEGIN
  [1m[36m (3.5ms)[0m  [1mCREATE UNIQUE INDEX  "index_users_on_email" ON "users"  ("email")[0m
PG::UniqueViolation: ERROR:  could not create unique index "index_users_on_email"
DETAIL:  Key (email)=(MyString) is duplicated.
: CREATE UNIQUE INDEX  "index_users_on_email" ON "users"  ("email")
  [1m[35m (0.3ms)[0m  ROLLBACK
  [1m[36m (5045.9ms)[0m  [1mDROP DATABASE IF EXISTS "wolfadmin_test"[0m
PG::ObjectInUse: ERROR:  database "wolfadmin_test" is being accessed by other users
DETAIL:  There is 1 other session using the database.
: DROP DATABASE IF EXISTS "wolfadmin_test"
  [1m[35m (0.5ms)[0m  CREATE DATABASE "wolfadmin_test" ENCODING = 'utf8'
PG::DuplicateDatabase: ERROR:  database "wolfadmin_test" already exists
: CREATE DATABASE "wolfadmin_test" ENCODING = 'utf8'
  [1m[36mSQL (13.2ms)[0m  [1mCREATE EXTENSION IF NOT EXISTS "plpgsql"[0m
  [1m[35m (42.5ms)[0m  DROP TABLE "users"
  [1m[36m (8.9ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (2.5ms)[0m  CREATE UNIQUE INDEX  "index_users_on_email" ON "users" USING btree ("email")
  [1m[36m (0.7ms)[0m  [1mSELECT version FROM "schema_migrations"[0m
  [1m[35m (1.0ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20150922144059')
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (0.5ms)[0m  ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "users" DISABLE TRIGGER ALL
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mFixture Delete (0.7ms)[0m  DELETE FROM "users"
  [1m[36m (447.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.4ms)[0m  ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "users" ENABLE TRIGGER ALL
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-----------------------------------------------
UserTest: test_email_addresses_should_be_unique
-----------------------------------------------
  [1m[35m (0.3ms)[0m  SAVEPOINT active_record_1
  [1m[36mUser Exists (0.8ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO "users" ("created_at", "email", "name", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "id"  [["created_at", "2015-09-22 14:46:14.442299"], ["email", "user@example.com"], ["name", "Example User"], ["updated_at", "2015-09-22 14:46:14.442299"]]
  [1m[36m (0.2ms)[0m  [1mRELEASE SAVEPOINT active_record_1[0m
  [1m[35mUser Exists (0.5ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('USER@EXAMPLE.COM') LIMIT 1
  [1m[36m (0.3ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
--------------------------------------
UserTest: test_email_should_be_present
--------------------------------------
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('     ') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
-------------------------------------------
UserTest: test_email_should_not_be_too_long
-------------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@example.co') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
-------------------------------------------------------------
UserTest: test_email_validation_should_accept_valid_addresses
-------------------------------------------------------------
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('USER@foo.COM') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('A_US-ER@foo.bar.org') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('first.last@foo.jp') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('alice+bob@baz.cn') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
---------------------------------------------------------------
UserTest: test_email_validation_should_reject_invalid_addresses
---------------------------------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example,com') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user_at_foo.org') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user.name@example.') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar_baz.com') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar+baz.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
-------------------------------------
UserTest: test_name_should_be_present
-------------------------------------
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
------------------------------------------
UserTest: test_name_should_not_be_too_long
------------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
------------------------------
UserTest: test_should_be_valid
------------------------------
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[36m (5091.9ms)[0m  [1mDROP DATABASE IF EXISTS "wolfadmin_test"[0m
PG::ObjectInUse: ERROR:  database "wolfadmin_test" is being accessed by other users
DETAIL:  There is 1 other session using the database.
: DROP DATABASE IF EXISTS "wolfadmin_test"
  [1m[35mActiveRecord::SchemaMigration Load (0.6ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to CreateUsers (20150922145615)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (13.8ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
PG::DuplicateTable: ERROR:  relation "users" already exists
: CREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) 
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (5038.2ms)[0m  [1mDROP DATABASE IF EXISTS "wolfadmin_test"[0m
PG::ObjectInUse: ERROR:  database "wolfadmin_test" is being accessed by other users
DETAIL:  There is 1 other session using the database.
: DROP DATABASE IF EXISTS "wolfadmin_test"
  [1m[35m (0.7ms)[0m  CREATE DATABASE "wolfadmin_test" ENCODING = 'utf8'
PG::DuplicateDatabase: ERROR:  database "wolfadmin_test" already exists
: CREATE DATABASE "wolfadmin_test" ENCODING = 'utf8'
  [1m[36mSQL (0.4ms)[0m  [1mCREATE EXTENSION IF NOT EXISTS "plpgsql"[0m
  [1m[35m (5.0ms)[0m  DROP TABLE "users"
  [1m[36m (8.4ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (10.4ms)[0m  CREATE UNIQUE INDEX  "index_users_on_email" ON "users" USING btree ("email")
  [1m[36m (1.1ms)[0m  [1mSELECT version FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.6ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to CreateUsers (20150922145615)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (11.7ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
PG::DuplicateTable: ERROR:  relation "users" already exists
: CREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) 
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (1.0ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to CreateUsers (20150922145615)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (524.8ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
PG::DuplicateTable: ERROR:  relation "users" already exists
: CREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) 
  [1m[35m (0.3ms)[0m  ROLLBACK
  [1m[36m (5043.9ms)[0m  [1mDROP DATABASE IF EXISTS "wolfadmin_test"[0m
PG::ObjectInUse: ERROR:  database "wolfadmin_test" is being accessed by other users
DETAIL:  There is 1 other session using the database.
: DROP DATABASE IF EXISTS "wolfadmin_test"
  [1m[35m (0.5ms)[0m  CREATE DATABASE "wolfadmin_test" ENCODING = 'utf8'
PG::DuplicateDatabase: ERROR:  database "wolfadmin_test" already exists
: CREATE DATABASE "wolfadmin_test" ENCODING = 'utf8'
  [1m[36mSQL (0.8ms)[0m  [1mCREATE EXTENSION IF NOT EXISTS "plpgsql"[0m
  [1m[35m (25.1ms)[0m  DROP TABLE "users"
  [1m[36m (61.7ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (2.7ms)[0m  CREATE UNIQUE INDEX  "index_users_on_email" ON "users" USING btree ("email")
  [1m[36m (0.9ms)[0m  [1mSELECT version FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.6ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (0.3ms)[0m  [1mDROP DATABASE IF EXISTS "wolfadmin_test"[0m
  [1m[35m (1218.1ms)[0m  CREATE DATABASE "wolfadmin_test" ENCODING = 'utf8'
  [1m[36mSQL (0.6ms)[0m  [1mCREATE EXTENSION IF NOT EXISTS "plpgsql"[0m
  [1m[35m (12.7ms)[0m  CREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) 
  [1m[36m (3.9ms)[0m  [1mCREATE UNIQUE INDEX  "index_users_on_email" ON "users" USING btree ("email")[0m
  [1m[35m (2.0ms)[0m  CREATE TABLE "schema_migrations" ("version" character varying(255) NOT NULL) 
  [1m[36m (2.4ms)[0m  [1mCREATE UNIQUE INDEX  "unique_schema_migrations" ON "schema_migrations"  ("version")[0m
  [1m[35m (0.6ms)[0m  SELECT version FROM "schema_migrations"
  [1m[36m (0.8ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20150922144059')[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.6ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to CreateUsers (20150922145615)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (3.6ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
PG::DuplicateTable: ERROR:  relation "users" already exists
: CREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) 
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.9ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to CreateUsers (20150922145615)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (3.7ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
PG::DuplicateTable: ERROR:  relation "users" already exists
: CREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) 
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[36m (5042.3ms)[0m  [1mDROP DATABASE IF EXISTS "wolfadmin_test"[0m
PG::ObjectInUse: ERROR:  database "wolfadmin_test" is being accessed by other users
DETAIL:  There is 1 other session using the database.
: DROP DATABASE IF EXISTS "wolfadmin_test"
  [1m[35mActiveRecord::SchemaMigration Load (0.6ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (4.2ms)[0m  [1mCREATE TABLE "schema_migrations" ("version" character varying(255) NOT NULL) [0m
  [1m[35m (2.6ms)[0m  CREATE UNIQUE INDEX  "unique_schema_migrations" ON "schema_migrations"  ("version")
  [1m[36mActiveRecord::SchemaMigration Load (1.0ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to AddIndexToUsersEmail (20150922144059)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (0.5ms)[0m  [1mCREATE UNIQUE INDEX  "index_users_on_email" ON "users"  ("email")[0m
PG::UndefinedTable: ERROR:  relation "users" does not exist
: CREATE UNIQUE INDEX  "index_users_on_email" ON "users"  ("email")
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.8ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[36m (122.1ms)[0m  [1mDROP DATABASE IF EXISTS "wolfadmin_test"[0m
  [1m[35m (357.5ms)[0m  CREATE DATABASE "wolfadmin_test" ENCODING = 'utf8'
  [1m[36mSQL (0.6ms)[0m  [1mCREATE EXTENSION IF NOT EXISTS "plpgsql"[0m
  [1m[35m (11.5ms)[0m  CREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) 
  [1m[36m (2.5ms)[0m  [1mCREATE UNIQUE INDEX  "index_users_on_email" ON "users" USING btree ("email")[0m
  [1m[35m (1.8ms)[0m  CREATE TABLE "schema_migrations" ("version" character varying(255) NOT NULL) 
  [1m[36m (2.0ms)[0m  [1mCREATE UNIQUE INDEX  "unique_schema_migrations" ON "schema_migrations"  ("version")[0m
  [1m[35m (0.5ms)[0m  SELECT version FROM "schema_migrations"
  [1m[36m (1.0ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20150922144059')[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.9ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to CreateUsers (20150922145615)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (21.7ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
PG::DuplicateTable: ERROR:  relation "users" already exists
: CREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) 
  [1m[35m (0.5ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to CreateUsers (20150922145615)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (66.1ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
PG::DuplicateTable: ERROR:  relation "users" already exists
: CREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) 
  [1m[35m (0.3ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to CreateUsers (20150922145615)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (7.0ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying(255), "email" character varying(255), "password_digest" character varying(255), "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "schema_migrations" ("version") VALUES ($1)  [["version", "20150922145615"]]
  [1m[36m (15.9ms)[0m  [1mCOMMIT[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (0.5ms)[0m  ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "users" DISABLE TRIGGER ALL
  [1m[36m (0.7ms)[0m  [1mBEGIN[0m
  [1m[35mFixture Delete (0.8ms)[0m  DELETE FROM "users"
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.5ms)[0m  ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "users" ENABLE TRIGGER ALL
  [1m[36m (1.2ms)[0m  [1mBEGIN[0m
-----------------------------------------------
UserTest: test_email_addresses_should_be_unique
-----------------------------------------------
  [1m[35m (0.3ms)[0m  SAVEPOINT active_record_1
  [1m[36mUser Exists (19.8ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.4ms)[0m  ROLLBACK TO SAVEPOINT active_record_1
  [1m[36mUser Exists (0.7ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('USER@EXAMPLE.COM') LIMIT 1[0m
  [1m[35m (0.9ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
--------------------------------------
UserTest: test_email_should_be_present
--------------------------------------
  [1m[35mUser Exists (0.6ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('     ') LIMIT 1
  [1m[36m (0.4ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
-------------------------------------------
UserTest: test_email_should_not_be_too_long
-------------------------------------------
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@example.co') LIMIT 1[0m
  [1m[35m (0.4ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
-------------------------------------------------------------
UserTest: test_email_validation_should_accept_valid_addresses
-------------------------------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
---------------------------------------------------------------
UserTest: test_email_validation_should_reject_invalid_addresses
---------------------------------------------------------------
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example,com') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user_at_foo.org') LIMIT 1
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user.name@example.') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar_baz.com') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar+baz.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
-------------------------------------
UserTest: test_name_should_be_present
-------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
------------------------------------------
UserTest: test_name_should_not_be_too_long
------------------------------------------
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.3ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
------------------------------
UserTest: test_should_be_valid
------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (0.5ms)[0m  ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "users" DISABLE TRIGGER ALL
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mFixture Delete (0.5ms)[0m  DELETE FROM "users"
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "users" ENABLE TRIGGER ALL
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
-----------------------------------------------
UserTest: test_email_addresses_should_be_unique
-----------------------------------------------
  [1m[35m (0.3ms)[0m  SAVEPOINT active_record_1
  [1m[36mUser Exists (1.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35mSQL (1.2ms)[0m  INSERT INTO "users" ("created_at", "email", "name", "password_digest", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["created_at", "2015-09-22 15:23:08.211261"], ["email", "user@example.com"], ["name", "Example User"], ["password_digest", "$2a$04$4lz/nmYomfifQ52/SWrHOeAv.ljeOp.oMPk6.JKfV.R2mPZr1xn12"], ["updated_at", "2015-09-22 15:23:08.211261"]]
  [1m[36m (0.3ms)[0m  [1mRELEASE SAVEPOINT active_record_1[0m
  [1m[35mUser Exists (1.0ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('USER@EXAMPLE.COM') LIMIT 1
  [1m[36m (0.4ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
--------------------------------------
UserTest: test_email_should_be_present
--------------------------------------
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('     ') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
-------------------------------------------
UserTest: test_email_should_not_be_too_long
-------------------------------------------
  [1m[35mUser Exists (0.5ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@example.co') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
-------------------------------------------------------------
UserTest: test_email_validation_should_accept_valid_addresses
-------------------------------------------------------------
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('USER@foo.COM') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('A_US-ER@foo.bar.org') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('first.last@foo.jp') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('alice+bob@baz.cn') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
---------------------------------------------------------------
UserTest: test_email_validation_should_reject_invalid_addresses
---------------------------------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example,com') LIMIT 1
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user_at_foo.org') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user.name@example.') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar_baz.com') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar+baz.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
-------------------------------------
UserTest: test_name_should_be_present
-------------------------------------
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
------------------------------------------
UserTest: test_name_should_not_be_too_long
------------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
------------------------------
UserTest: test_should_be_valid
------------------------------
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.8ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (0.5ms)[0m  ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "users" DISABLE TRIGGER ALL
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mFixture Delete (0.5ms)[0m  DELETE FROM "users"
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "users" ENABLE TRIGGER ALL
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
-----------------------------------------------
UserTest: test_email_addresses_should_be_unique
-----------------------------------------------
  [1m[35m (0.3ms)[0m  SAVEPOINT active_record_1
  [1m[36mUser Exists (0.9ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "users" ("created_at", "email", "name", "password_digest", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["created_at", "2015-09-22 15:24:35.449547"], ["email", "user@example.com"], ["name", "Example User"], ["password_digest", "$2a$04$CB435WNnOYKgQ6BY.zIGp.8sHgJvVnP6gYFadN7Wq5ey1ma4i27v6"], ["updated_at", "2015-09-22 15:24:35.449547"]]
  [1m[36m (0.2ms)[0m  [1mRELEASE SAVEPOINT active_record_1[0m
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('USER@EXAMPLE.COM') LIMIT 1
  [1m[36m (0.6ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
--------------------------------------
UserTest: test_email_should_be_present
--------------------------------------
  [1m[36mUser Exists (0.6ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('     ') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-------------------------------------------
UserTest: test_email_should_not_be_too_long
-------------------------------------------
  [1m[35mUser Exists (0.5ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@example.co') LIMIT 1
  [1m[36m (0.3ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
-------------------------------------------------------------
UserTest: test_email_validation_should_accept_valid_addresses
-------------------------------------------------------------
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('USER@foo.COM') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('A_US-ER@foo.bar.org') LIMIT 1[0m
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('first.last@foo.jp') LIMIT 1
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('alice+bob@baz.cn') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
---------------------------------------------------------------
UserTest: test_email_validation_should_reject_invalid_addresses
---------------------------------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example,com') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user_at_foo.org') LIMIT 1[0m
  [1m[35mUser Exists (0.5ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user.name@example.') LIMIT 1
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar_baz.com') LIMIT 1[0m
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar+baz.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
-------------------------------------
UserTest: test_name_should_be_present
-------------------------------------
  [1m[36mUser Exists (0.6ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
------------------------------------------
UserTest: test_name_should_not_be_too_long
------------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
----------------------------------------------------
UserTest: test_password_should_be_present_(nonblank)
----------------------------------------------------
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
----------------------------------------------------
UserTest: test_password_should_have_a_minimum_length
----------------------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
------------------------------
UserTest: test_should_be_valid
------------------------------
  [1m[36mUser Exists (1.1ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36mActiveRecord::SchemaMigration Load (0.8ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (1.1ms)[0m  ALTER TABLE "schema_migrations" DISABLE TRIGGER ALL;ALTER TABLE "users" DISABLE TRIGGER ALL
  [1m[36m (0.4ms)[0m  [1mBEGIN[0m
  [1m[35mFixture Delete (1.0ms)[0m  DELETE FROM "users"
  [1m[36m (466.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.4ms)[0m  ALTER TABLE "schema_migrations" ENABLE TRIGGER ALL;ALTER TABLE "users" ENABLE TRIGGER ALL
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
-----------------------------------------------
UserTest: test_email_addresses_should_be_unique
-----------------------------------------------
  [1m[35m (0.4ms)[0m  SAVEPOINT active_record_1
  [1m[36mUser Exists (0.9ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "users" ("created_at", "email", "name", "password_digest", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["created_at", "2015-09-22 15:29:54.528344"], ["email", "user@example.com"], ["name", "Example User"], ["password_digest", "$2a$04$jIUpDgT3Zje4vqKe.Km6R.Vl0GLldhaGq78ziffxuXGr/5mN1MQ7u"], ["updated_at", "2015-09-22 15:29:54.528344"]]
  [1m[36m (0.2ms)[0m  [1mRELEASE SAVEPOINT active_record_1[0m
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('USER@EXAMPLE.COM') LIMIT 1
  [1m[36m (0.3ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
--------------------------------------
UserTest: test_email_should_be_present
--------------------------------------
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('     ') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
-------------------------------------------
UserTest: test_email_should_not_be_too_long
-------------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@example.co') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
-------------------------------------------------------------
UserTest: test_email_validation_should_accept_valid_addresses
-------------------------------------------------------------
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('USER@foo.COM') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('A_US-ER@foo.bar.org') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('first.last@foo.jp') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('alice+bob@baz.cn') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
---------------------------------------------------------------
UserTest: test_email_validation_should_reject_invalid_addresses
---------------------------------------------------------------
  [1m[35mUser Exists (0.4ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example,com') LIMIT 1
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user_at_foo.org') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user.name@example.') LIMIT 1
  [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar_baz.com') LIMIT 1[0m
  [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('foo@bar+baz.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
-------------------------------------
UserTest: test_name_should_be_present
-------------------------------------
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
------------------------------------------
UserTest: test_name_should_not_be_too_long
------------------------------------------
  [1m[35mUser Exists (0.5ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.1ms)[0m  BEGIN
----------------------------------------------------
UserTest: test_password_should_be_present_(nonblank)
----------------------------------------------------
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.2ms)[0m  ROLLBACK
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
----------------------------------------------------
UserTest: test_password_should_have_a_minimum_length
----------------------------------------------------
  [1m[35mUser Exists (0.7ms)[0m  SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1
  [1m[36m (0.3ms)[0m  [1mROLLBACK[0m
  [1m[35m (0.2ms)[0m  BEGIN
------------------------------
UserTest: test_should_be_valid
------------------------------
  [1m[36mUser Exists (0.5ms)[0m  [1mSELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('user@example.com') LIMIT 1[0m
  [1m[35m (0.4ms)[0m  ROLLBACK
  [1m[36m (5048.5ms)[0m  [1mDROP DATABASE IF EXISTS "wolfadmin_test"[0m
PG::ObjectInUse: ERROR:  database "wolfadmin_test" is being accessed by other users
DETAIL:  There is 1 other session using the database.
: DROP DATABASE IF EXISTS "wolfadmin_test"
  [1m[36m (15.1ms)[0m  [1mCREATE TABLE "schema_migrations" ("version" character varying NOT NULL) [0m
  [1m[35m (8.8ms)[0m  CREATE UNIQUE INDEX  "unique_schema_migrations" ON "schema_migrations"  ("version")
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to CreateUsers (20150922144058)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (13.2ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "name" character varying, "email" character varying, "password_digest" character varying, "timezone" character varying, "avatar" bytea, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "schema_migrations" ("version") VALUES ($1)  [["version", "20150922144058"]]
  [1m[36m (1.7ms)[0m  [1mCOMMIT[0m
Migrating to AddIndexToUsersEmail (20150922144059)
  [1m[35m (0.4ms)[0m  BEGIN
  [1m[36m (1.5ms)[0m  [1mCREATE UNIQUE INDEX  "index_users_on_email" ON "users"  ("email")[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "schema_migrations" ("version") VALUES ($1)  [["version", "20150922144059"]]
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (4.3ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'users'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[36m (0.7ms)[0m  [1mBEGIN[0m
  [1m[35mUser Exists (1.2ms)[0m  SELECT  1 AS one FROM "users" WHERE LOWER("users"."email") = LOWER('jahpereira@gmail.com') LIMIT 1
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "users" ("name", "email", "password_digest", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5) RETURNING "id"[0m  [["name", "Jorge Pereira"], ["email", "jahpereira@gmail.com"], ["password_digest", "$2a$04$AElDoCy9VXmjWv.kpu.hT.mdR9tR7HtiIoNDUTNj.H19JsgRE0mMO"], ["created_at", "2015-09-23 15:31:37.161069"], ["updated_at", "2015-09-23 15:31:37.161069"]]
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36mUser Load (1.2ms)[0m  [1mSELECT "users".* FROM "users"[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (0.4ms)[0m  BEGIN
  [1m[36m (2.1ms)[0m  [1mALTER TABLE "users" ADD "avatar_file_name" character varying[0m
  [1m[35m (0.4ms)[0m  ALTER TABLE "users" ADD "avatar_content_type" character varying
  [1m[36m (0.4ms)[0m  [1mALTER TABLE "users" ADD "avatar_file_size" integer[0m
  [1m[35m (0.4ms)[0m  ALTER TABLE "users" ADD "avatar_updated_at" timestamp
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "schema_migrations" ("version") VALUES ($1)[0m  [["version", "20150923182410"]]
  [1m[35m (1.1ms)[0m  COMMIT
  [1m[36mActiveRecord::SchemaMigration Load (0.4ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (4.6ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'users'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[36m (5042.1ms)[0m  [1mDROP DATABASE IF EXISTS "wolfadmin_test"[0m
PG::ObjectInUse: ERROR:  database "wolfadmin_test" is being accessed by other users
DETAIL:  There is 1 other session using the database.
: DROP DATABASE IF EXISTS "wolfadmin_test"
  [1m[35mActiveRecord::SchemaMigration Load (0.6ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36mActiveRecord::SchemaMigration Load (0.8ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to AddRememberDigestToUsers (20150923172346)
  [1m[35m (0.4ms)[0m  BEGIN
  [1m[36m (1.2ms)[0m  [1mALTER TABLE "users" ADD "remember_digest" character varying[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "schema_migrations" ("version") VALUES ($1)  [["version", "20150923172346"]]
  [1m[36m (2.2ms)[0m  [1mCOMMIT[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (4.3ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'users'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[36mActiveRecord::SchemaMigration Load (22.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (5.3ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'users'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (4.0ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'users'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
